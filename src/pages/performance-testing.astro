---
// src/pages/performance-testing.astro

import Layout from '../components/Layout.astro';
import PortfolioContent from '../components/PortfolioContent.astro';


const performanceVisuals = [
    {
        title: "Non-Functional Tests report",
        id: "inspected",
        images: [
            {
                src: "/Security report.png",
                caption: "Report of Security Assessment on API Collection.",
                link: "/SIMPLAA API Security Assessment Report.pdf",
            },
            {
                src: "/immuni image.png",
                caption: "Report of ImmuniWeb assessment done on application.",
                link: "/ImmuniWeb Website Security Test Report - SIMPLAA.pdf"
            },
            {
                src: "/load image.png",
                caption: "Report of Performance test done on application.",
                link: "/SIMPLAA LOAD TEST RESULT.pdf"
            },
        ]
    }
];

// Define the unique content for the Performance Testing project
const performanceTestingData = {
    title: "Non-Functional Test: Performance + Security âš¡", 
    introduction: "This section highlights expertise in assessing system scalability and stability under stress, using JMeter to simulate realistic user load and identify bottlenecks. The artifacts below demonstrate practical application and detailed analysis.",
    sectionTitle: "Key Artifacts and Deliverables",
    sectionContent: "The goal was to transition from manual regression testing to a fully automated CI/CD pipeline. I designed a page object model architecture, utilizing both Selenium with Java and Playwright with TypeScript to cover different client needs, focusing on high reliability and maintainability.",
    projectUrl: [
        { name: "Rezumii", url: "https://resumii.netlify.app/" },
        { name: "Walure Erp Repository", url: "https://walure-erp.netlify.app" },
    ],     
    imageUrl: "/security.png",
    techStack: ["JMeter", "LoadRunner", "Grafana", "BlazeMeter", "AWS/Azure Cloud"],
    visuals: performanceVisuals,

};
---

<Layout title={performanceTestingData.title}>
    <PortfolioContent {...performanceTestingData} />
</Layout>