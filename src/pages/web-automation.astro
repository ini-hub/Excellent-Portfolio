---
// src/pages/web-automation.astro
import Layout from '../components/Layout.astro'; // Corrected Path
import PortfolioContent from '../components/PortfolioContent.astro';

const webAutomationVisuals = [
    {
        title: "User Interface",
        id: "user-interface",
        images: [
            {
                src: "/WEB UI/Web - Error message but Requirement fulfilled.PNG",
                caption: "Validation message was returned due to a misconfiguration although the requirement was met.",
            },
            {
                src: "/WEB UI/WEB - Exception error on UI - 500 Internal server error.PNG",
                caption: "Unfriendly validation message was returned due to a server exception error.",
            },
            {
                src: "/WEB UI/Web - Lack of space trimming - 400.PNG",
                caption: "Lack of whitespace trimming preventing valid user credential from Login.",
            },
            {
                src: "/WEB UI/WEB - Request failed with status code 400 on UI.PNG",
                caption: "Unfriendly validation message is displayed when invalid OTP is entered.",
            },
            {
                src: "/WEB UI/Web - UI Responsiveness.PNG",
                caption: "Lack of responsiveness on Tablet screen display",
            },
        ]
    },
    {
        title: "Web Inspected",
        id: "inspected",
        images: [
            {
                src: "/WEB UI/WEB - Character limit on email.PNG",
                caption: "Character limit was observed on the email field which led to an issue while attempting to add a partner.",
            },
            {
                src: "/WEB INSPECTED/Inspect - 404 Not found.PNG",
                caption: "Inexplicit validation message was returned when user attempted to get a value.",
                link: ""
            },
            {
                src: "/WEB INSPECTED/Inspect - 413 File too large.PNG",
                caption: "User is unable to add comment as attachment (file) added is deemed too large (1mb and above).",
            },
            {
                src: "/WEB INSPECTED/Inspect - 422 Error message.PNG",
                caption: "User is unable to proceed with adding a new user profile due to conflicting data with existing records.",
            },
            {
                src: "/WEB INSPECTED/Inspect - Exception - Invalid Currency Code - NR.PNG",
                caption: "Dashboard content could not be displayed due to unhandled exception dealing with invalid data value, I.E Expected currency code NG.",
            }
        ]
    }
];

// Define the unique content for the Web Automation project
const webAutomationData = {
    title: "Web Testing & Automation (Cypress)",
    introduction: "This portfolio section provides an in-depth look at my expertise in building robust, cross-browser automation frameworks. It highlights a proactive approach to identifying critical web defects, from poor UI responsiveness and improper server-side validations (e.g., 500/400 errors) to backend data conflicts and unhandled exceptions that prevent core functionality.",
    sectionTitle: "Key Artifacts and Deliverables",
    sectionContent: "The primary objective was to transition from manual regression testing to a fully automated CI/CD pipeline. I designed a page object model architecture, utilizing both Cypress with JavaScript and Playwright with TypeScript to cover diverse client needs. This work showcases my ability to debug complex issues, such as a lack of whitespace trimming on login fields, file size limitations on comments, and inexplicit validation messages, all while focusing on high reliability and maintainability of the test suites.",
    techStack: ["Cypress", "Selenium", "Playwright", "Java", "TypeScript", "Maven", "GitHub Actions"],
    projectUrl: [
        { name: "Rezumii", url: "https://resumii.netlify.app/" },
        { name: "Walure Erp Repository", url: "https://walure-erp.netlify.app" },
    ],     imageUrl: "/WEB UI/WEB - Request failed with status code 400 on UI.PNG",
    visuals: webAutomationVisuals,
};
---

<Layout title={webAutomationData.title}>
    <PortfolioContent {...webAutomationData} />
</Layout>