---
// src/components/ProjectVisuals.astro

// Define the properties: an array of objects where each object is a classification tab
interface VisualClassification {
    title: string;
    id: string; // Used for linking the mini-nav AND for section ID
    images: {
        src: string;
        caption: string;
        link?: string; // Optional link for the image/observation
    }[];
}

interface Props {
    visuals: VisualClassification[];
}

// NOTE: It's safer to ensure 'visuals' is an array here to prevent runtime errors
const { visuals = [] } = Astro.props;

// Define the ID for the main container to scope the JavaScript
const containerId = 'visuals-tab-container';

// Set the ID of the first tab to be active by default
const initialActiveTabId = visuals[0]?.id || '';

// Define the number of items per page (3, as requested)
const ITEMS_PER_PAGE = 3;
---

<div id={containerId} class="">
    <h2 class="text-3xl font-bold text-yellow-accent text-center border-b border-gray-700 pb-4">
        Project Visuals & Detailed Observations
    </h2>

    {/* MINI NAVIGATION (Only visible if visuals exist) */}
    {visuals.length > 0 && (
        <nav class="sticky top-[70px] bg-deep-blue shadow-lg z-40 mb-10">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <ul class="flex justify-center space-x-6 sm:space-x-10 py-3 overflow-x-auto">
                    {visuals.map((category) => (
                        <li data-tab-link={category.id}>
                            <a 
                                href="#"
                                data-target={category.id}
                                class={`
                                    tab-button cursor-pointer
                                    whitespace-nowrap text-lg font-semibold text-gray-300 
                                    hover:text-yellow-accent transition duration-200
                                    ${category.id === initialActiveTabId ? 'text-yellow-accent border-b-2 border-yellow-accent' : ''}
                                `}
                            >
                                {category.title}
                            </a>
                        </li>
                    ))}
                </ul>
            </div>
        </nav>
    )}

    {/* CONTENT SECTIONS - Pagination logic is implemented in the script */}
    <div class="space-y-16">
        {visuals.map((category) => (
            <section 
                id={category.id} 
                data-tab-content 
                class={`
                    tab-content transition duration-300 ease-in-out
                    ${category.id === initialActiveTabId ? 'block' : 'hidden'}
                `}
            >
                {/* FIX 1: Grid Layout Update 
                    - grid-cols-1 (mobile)
                    - md:grid-cols-4 (medium screens)
                    - lg:grid-cols-3 (large screens)
                */}
                <div 
                    class="grid grid-cols-1 md:grid-cols-4 lg:grid-cols-3 gap-8 mb-8"
                    data-image-grid
                >
                    {/* Render all images initially. JS will manage their visibility. */}
                    {category.images.map((item, index) => (
                        <div 
                            class="bg-gray-800 rounded-lg shadow-xl overflow-hidden group page-item"
                            data-page-index={Math.floor(index / ITEMS_PER_PAGE)}
                            data-item-index={index}
                        >
                            <a href={item.link || item.src} target="_blank" class="block">
                                <img 
                                    src={item.src} 
                                    alt={item.caption} 
                                    class="w-full h-48 object-cover transition duration-300 group-hover:opacity-85" 
                                />
                            </a>
                            <div class="p-4">
                                <p class="text-base text-gray-300">
                                    {item.caption}
                                </p>
                                {item.link && (
                                    <a href={item.link} target="_blank" class="mt-2 text-yellow-accent hover:text-white text-sm block">
                                        View Full Context â†’
                                    </a>
                                )}
                            </div>
                        </div>
                    ))}
                </div>

                {/* Pagination Controls Container */}
                {category.images.length > ITEMS_PER_PAGE && (
                    <div class="flex justify-center space-x-4 mt-8" data-pagination-controls>
                        {/* Buttons will be generated by the JavaScript */}
                    </div>
                )}

            </section>
        ))}
    </div>
</div>

<script is:inline>
    const ITEMS_PER_PAGE = 3;

    document.addEventListener('DOMContentLoaded', () => {
        const container = document.getElementById('visuals-tab-container');
        if (!container) return;

        const tabButtons = container.querySelectorAll('.tab-button');
        const tabContents = container.querySelectorAll('[data-tab-content]');
        
        let currentPage = {}; // Stores the current page index for each tab: { 'tab-id': pageIndex }

        // --- PAGINATION LOGIC (Unchanged) ---
        function renderPagination(tabContent) {
            const tabId = tabContent.id;
            const items = tabContent.querySelectorAll('.page-item');
            const totalItems = items.length;
            const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);
            
            if (totalPages <= 1) return;

            const controlsContainer = tabContent.querySelector('[data-pagination-controls]');
            if (!controlsContainer) return;

            controlsContainer.innerHTML = ''; 
            const activePageIndex = currentPage[tabId] || 0; 

            for (let i = 0; i < totalPages; i++) {
                const button = document.createElement('button');
                button.textContent = i + 1;
                button.setAttribute('data-page', i);
                button.className = `
                    px-4 py-2 rounded-full font-semibold transition duration-200
                    ${i === activePageIndex ? 'bg-yellow-accent text-deep-blue' : 'bg-gray-700 text-white hover:bg-gray-600'}
                `;
                button.addEventListener('click', () => {
                    goToPage(tabId, i);
                });
                controlsContainer.appendChild(button);
            }
        }

        function goToPage(tabId, pageIndex) {
            currentPage[tabId] = pageIndex;
            const tabContent = container.querySelector(`#${tabId}`);
            if (!tabContent) return;

            const items = tabContent.querySelectorAll('.page-item');
            
            // 1. Show/Hide items based on pageIndex
            items.forEach(item => {
                const itemPageIndex = parseInt(item.getAttribute('data-page-index'));
                if (itemPageIndex === pageIndex) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
            
            // 2. Re-render pagination controls to highlight the new active page
            renderPagination(tabContent);
            
            // 3. Scroll to the top of the content section
            tabContent.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
        
        // --- TAB SWITCHING LOGIC (Modified for FIX 2) ---
        function switchTab(targetId) {
            tabContents.forEach(content => {
                content.classList.add('hidden');
                content.classList.remove('block');
            });
            tabButtons.forEach(button => {
                button.classList.remove('text-yellow-accent', 'border-b-2', 'border-yellow-accent');
                button.classList.add('text-gray-300');
            });

            const activeContent = container.querySelector(`#${targetId}`);
            if (activeContent) {
                activeContent.classList.remove('hidden');
                activeContent.classList.add('block');
                
                // Initialize or re-render pagination for the new active tab
                const initialPageIndex = currentPage[targetId] || 0;
                goToPage(targetId, initialPageIndex);
            }
            
            // Note: Use data-target to find the active link
            const activeLink = container.querySelector(`a[data-target="${targetId}"]`);
            if (activeLink) {
                activeLink.classList.add('text-yellow-accent', 'border-b-2', 'border-yellow-accent');
                activeLink.classList.remove('text-gray-300');
            }
        }

        // Add event listeners to all tab buttons (Modified for FIX 2)
        tabButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault(); // FIX 2: Stop browser scroll jump
                const targetId = button.getAttribute('data-target'); // Read from data-target

                // OPTIONAL: Scroll the main window to the top (or to the component) 
                // when a tab is clicked, ensuring the user sees the content change immediately.
                // window.scrollTo({ top: 0, behavior: 'smooth' }); 
                
                switchTab(targetId);
            });
        });

        // --- INITIALIZATION (Modified for FIX 2) ---
        // Find the initial active tab and trigger the switch/pagination
        const initialActive = container.querySelector(`a[data-target="${initialActiveTabId}"]`);
        if (initialActive) {
            switchTab(initialActiveTabId);
        } else if (visuals.length > 0) {
            // Fallback for when no tab is pre-selected (though usually one is)
            switchTab(visuals[0].id);
        }
    });
</script>